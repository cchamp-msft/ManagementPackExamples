<ManagementPackFragment SchemaVersion="2.0" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
<TypeDefinitions>
  <ModuleTypes>
    <DataSourceModuleType ID="Microsoft.Windows.Server.Legacy.LogicalDisk.FreeSpace.ModuleType" Accessibility="Public" Batching="false">
      <Configuration>
        <xsd:element minOccurs="1" name="IntervalSeconds" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        <xsd:element minOccurs="1" name="TargetComputerName" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        <xsd:element minOccurs="1" name="TimeoutSeconds" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        <xsd:element minOccurs="1" name="DebugFlag" type="xsd:boolean" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
      </Configuration>
      <OverrideableParameters>
        <OverrideableParameter ID="IntervalSeconds" Selector="$Config/IntervalSeconds$" ParameterType="int" />
        <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
        <OverrideableParameter ID="DebugFlag" Selector="$Config/DebugFlag$" ParameterType="bool" />
      </OverrideableParameters>
      <ModuleImplementation Isolation="Any">
        <Composite>
          <MemberModules>
            <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.TimedScript.PropertyBagProvider">
              <IntervalSeconds>$Config/IntervalSeconds$</IntervalSeconds>
              <SyncTime />
              <ScriptName>Microsoft.Windows.Server.Legacy.FreeSpace.vbs</ScriptName>
              <Arguments>$Config/TargetComputerName$ $Config/DebugFlag$</Arguments>
              <ScriptBody>
                'Copyright (c) Microsoft Corporation. All rights reserved.

                '*************************************************************************
                ' $ScriptName: "Microsoft.Windows.Server.Common"$
                '
                ' Purpose: To have one place for common stuff across various BaseOS VBScripts
                '
                ' $File: Microsoft.Windows.Server.Common.vbs$
                '*************************************************************************

                Option Explicit

                SetLocale("en-us")

                ' LogScripEvent Constants
                Const lsEventError                 = 1
                Const lsEventWarning               = 2
                Const lsEventInformation           = 3

                ' WMI Constants
                Const wbemCimtypeUseDefault        = 0   'Use Default Type CIM type - Custom
                Const wbemCimtypeSint16            = 2   'Signed 16-bit integer
                Const wbemCimtypeSint32            = 3   'Signed 32-bit integer
                Const wbemCimtypeReal32            = 4   '32-bit real number
                Const wbemCimtypeReal64            = 5   '64-bit real number
                Const wbemCimtypeString            = 8   'String
                Const wbemCimtypeBoolean           = 11  'Boolean value
                Const wbemCimtypeObject            = 13  'CIM object
                Const wbemCimtypeSint8             = 16  'Signed 8-bit integer
                Const wbemCimtypeUint8             = 17  'Unsigned 8-bit integer
                Const wbemCimtypeUint16            = 18  'Unsigned 16-bit integer
                Const wbemCimtypeUint32            = 19  'Unsigned 32-bit integer
                Const wbemCimtypeSint64            = 20  'Signed 64-bit integer
                Const wbemCimtypeUint64            = 21  'Unsigned 64-bit integer
                Const wbemCimtypeDatetime          = 101 'Date/time value
                Const wbemCimtypeReference         = 102 'Reference to a CIM object
                Const wbemCimtypeChar16            = 103 '16-bit character

                Const ErrAction_None               = 0
                Const ErrAction_Trace              = 1
                Const ErrAction_ThrowError         = 16
                Const ErrAction_Abort              = 32
                Const ErrAction_ThrowErrorAndAbort = 48

                Const DISKSIZE_BYTES_IN_MB = 1048576

                Dim g_ErrorEventNumber, g_TraceEventNumber, g_DebugFlag
                g_ErrorEventNumber = 4001
                g_TraceEventNumber = 4002
                g_DebugFlag = False

                '---------------------------------------------------------------------------
                ' Returns WMI Instance requested. Tries to execute WMI query a N times.
                '---------------------------------------------------------------------------
                Function WMIGetInstanceExTryN(oWMI, ByVal sInstance, ByVal N)
                Dim oInstance, nInstanceCount
                Dim e, i
                Set e = New Error

                For i = 0 To i &lt; N
                On Error Resume Next
                Set oInstance = oWMI.InstancesOf(sInstance)
                e.Save
                On Error Goto 0
                If IsEmpty(oInstance) Or e.Number &lt;&gt; 0 Then
                If i = N - 1 Then
                ThrowScriptError "The class name '" &amp; sInstance &amp; "' returned no instances.  Please check to see if this is a valid WMI class name.", e
                End If
                Else
                On Error Resume Next
                nInstanceCount = oInstance.Count
                e.Save
                On Error Goto 0
                If e.Number &lt;&gt; 0 Then
                If i = N - 1 Then
                ThrowScriptError "The class name '" &amp; sInstance &amp; "' did not return any valid instances.  Please check to see if this is a valid WMI class name.", e
                End If
                Else
                Exit For
                End If
                End If
                WScript.Sleep(1000)
                Next

                Set WMIGetInstanceExTryN = oInstance
                End Function

                '---------------------------------------------------------------------------
                ' Returns WMI Instance requested.
                '---------------------------------------------------------------------------
                Function WMIGetInstanceEx(oWMI, ByVal sInstance)
                Dim oInstance, nInstanceCount
                Dim e
                Set e = New Error

                On Error Resume Next
                Set oInstance = oWMI.InstancesOf(sInstance)
                e.Save
                On Error Goto 0
                If IsEmpty(oInstance) Or e.Number &lt;&gt; 0 Then
                ThrowScriptError "The class name '" &amp; sInstance &amp; "' returned no instances.  Please check to see if this is a valid WMI class name.", e
                End If

                'Determine if we queried a valid WMI class - Count will return 0 or empty
                On Error Resume Next
                nInstanceCount = oInstance.Count
                e.Save
                On Error Goto 0
                If e.Number &lt;&gt; 0 Then
                ThrowScriptError "The class name '" &amp; sInstance &amp; "' did not return any valid instances.  Please check to see if this is a valid WMI class name.", e
                End If

                Set WMIGetInstanceEx = oInstance
                End Function

                '---------------------------------------------------------------------------
                ' Connect to WMI.
                '---------------------------------------------------------------------------
                Function WMIConnect(ByVal sNamespace)
                Dim oWMI
                Dim e
                Set e = New Error
                On Error Resume Next
                Set oWMI = GetObject(sNamespace)
                e.Save
                On Error Goto 0
                If IsEmpty(oWMI) Then
                ThrowScriptError "Unable to open WMI Namespace '" &amp; sNamespace &amp; "'. Check to see if the WMI service is enabled and running, and ensure this WMI namespace exists.", e
                End If
                Set WMIConnect = oWMI
                End Function

                '---------------------------------------------------------------------------
                ' Returns WMI Instance requested.
                '---------------------------------------------------------------------------
                Function WMIGetInstance(ByVal sNamespace, ByVal sInstance)
                Dim oWMI, oInstance
                Set oWMI = WMIConnect(sNamespace)
                Set oInstance = WMIGetInstanceEx(oWMI, sInstance)
                Set WMIGetInstance = oInstance
                End Function

                '---------------------------------------------------------------------------
                ' Returns WMI Instance requested.
                '---------------------------------------------------------------------------
                Function WMIGetInstanceNoAbort(ByVal sNamespace, ByVal sInstance)
                Dim oWMI, oInstance, nInstanceCount

                On Error Resume Next
                Set oWMI = GetObject(sNamespace)
                If Not IsEmpty(oWMI) Then
                Set oInstance = oWMI.InstancesOf(sInstance)
                If Not IsEmpty(oInstance) And Err.Number = 0 Then
                'Determine if we queried a valid WMI class - Count will return 0 or empty
                nInstanceCount = oInstance.Count
                If Err.Number = 0 Then
                Set WMIGetInstanceNoAbort = oInstance
                On Error Goto 0
                Exit Function
                End If
                End If
                End If

                On Error Goto 0
                Set WMIGetInstanceNoAbort = Nothing
                End Function

                '---------------------------------------------------------------------------
                ' Executes the WMI query and returns the result set.
                '---------------------------------------------------------------------------
                Function WMIExecQuery(ByVal sNamespace, ByVal sQuery)
                Dim oWMI, oQuery, nInstanceCount
                Dim e
                Set e = New Error
                On Error Resume Next
                Set oWMI = GetObject(sNamespace)
                e.Save
                On Error Goto 0
                If IsEmpty(oWMI) Then
                ThrowScriptError "Unable to open WMI Namespace '" &amp; sNamespace &amp; "'.  Check to see if the WMI service is enabled and running, and ensure this WMI namespace exists.", e
                End If

                On Error Resume Next
                Set oQuery = oWMI.ExecQuery(sQuery)
                e.Save
                On Error Goto 0
                If IsEmpty(oQuery) Or e.Number &lt;&gt; 0 Then
                ThrowScriptError "The Query '" &amp; sQuery &amp; "' returned an invalid result set.  Please check to see if this is a valid WMI Query.", e
                End If

                'Determine if we queried a valid WMI class - Count will return 0 or empty
                On Error Resume Next
                nInstanceCount = oQuery.Count
                e.Save
                On Error Goto 0
                If e.Number &lt;&gt; 0 Then
                ThrowScriptError "The Query '" &amp; sQuery &amp; "' did not return any valid instances.  Please check to see if this is a valid WMI Query.", e
                End If

                Set WMIExecQuery = oQuery
                End Function

                '---------------------------------------------------------------------------
                ' Executes the WMI query and returns the result set, no abort version.
                '---------------------------------------------------------------------------
                Function WMIExecQueryNoAbort(ByVal sNamespace, ByVal sQuery)
                Dim oWMI, oQuery
                Set oWMI = GetObject(sNamespace)
                Set oQuery = oWMI.ExecQuery(sQuery)
                Set WMIExecQueryNoAbort = oQuery
                End Function

                '---------------------------------------------------------------------------
                ' Retrieves WMI property.
                '---------------------------------------------------------------------------
                Function GetWMIProperty(oWmi, sPropName, nCIMType, ErrAction)
                Dim sValue, oWmiProp, oError
                Set oError = New Error

                ' Check that object is valid.
                If Not IsValidObject(oWmi) Then
                If (ErrAction And ErrAction_ThrowError) = ErrAction_ThrowError Then _
                ThrowScriptErrorNoAbort "Accessing property on invalid WMI object.", oError
                If (ErrAction And ErrAction_Abort) = ErrAction_Abort Then _
                Quit()

                GetWMIProperty = ""
                Exit Function
                End If

                ' Get properties...
                On Error Resume Next
                Set oWmiProp = oWmi.Properties_.Item(sPropName)
                oError.Save
                If oError.Number &lt;&gt; 0 Then
                If (ErrAction And ErrAction_ThrowError) = ErrAction_ThrowError Then _
                ThrowScriptErrorNoAbort "An error occurred while accessing WMI property: '" &amp; sPropName &amp; "'.", oError
                If (ErrAction And ErrAction_Abort) = ErrAction_Abort Then _
                Quit()
                End If
                On Error Goto 0

                If IsValidObject(oWmiProp) Then
                sValue = oWmiProp.Value

                If IsNull(sValue) Then ' If value is null, return blank to avoid any issues
                GetWMIProperty = ""
                Else
                Select Case (oWmiProp.CIMType)
                Case wbemCimtypeString, wbemCimtypeSint16, wbemCimtypeSint32, wbemCimtypeReal32, wbemCimtypeReal64, wbemCimtypeSint8, wbemCimtypeUint8, wbemCimtypeUint16, wbemCimtypeUint32, wbemCimtypeSint64, wbemCimtypeUint64:
                If Not oWmiProp.IsArray Then
                GetWMIProperty = Trim(CStr(sValue))
                Else
                GetWMIProperty = Join(sValue, ", ")
                End If
                Case wbemCimtypeBoolean:
                If sValue = 1 Or UCase(sValue) = "TRUE" Then
                GetWMIProperty = "True"
                Else
                GetWMIProperty = "False"
                End If
                Case wbemCimtypeDatetime:
                Dim sTmpStrDate

                ' First attempt to convert the whole wmi date string
                sTmpStrDate = Mid(sValue, 5, 2) &amp; "/" &amp; _
                Mid(sValue, 7, 2) &amp; "/" &amp; _
                Left(sValue, 4) &amp; " " &amp; _
                Mid (sValue, 9, 2) &amp; ":" &amp; _
                Mid(sValue, 11, 2) &amp; ":" &amp; _
                Mid(sValue, 13, 2)
                If IsDate(sTmpStrDate) Then
                GetWMIProperty = CDate(sTmpStrDate)
                Else
                ' Second, attempt just to convert the YYYYMMDD
                sTmpStrDate = Mid(sValue, 5, 2) &amp; "/" &amp; _
                Mid(sValue, 7, 2) &amp; "/" &amp; _
                Left(sValue, 4)
                If IsDate(sTmpStrDate) Then
                GetWMIProperty = CDate(sTmpStrDate)
                Else
                ' Nothing works - return passed in string
                GetWMIProperty = sValue
                End If
                End If
                Case Else:
                GetWMIProperty = ""
                End Select
                End If
                Else
                If (ErrAction And ErrAction_ThrowError) = ErrAction_ThrowError Then _
                ThrowScriptErrorNoAbort "An error occurred while accessing WMI property: '" &amp; sPropName &amp; "'.", oError
                If (ErrAction And ErrAction_Abort) = ErrAction_Abort Then _
                Quit()

                GetWMIProperty = ""
                End If

                If (ErrAction And ErrAction_Trace) = ErrAction_Trace Then _
                WScript.Echo "  + " &amp; sPropName &amp; " :: '" &amp; GetWMIProperty &amp; "'"
                End Function

                '---------------------------------------------------------------------------
                ' Class for error handling.
                '---------------------------------------------------------------------------
                Class Error
                Private m_lNumber
                Private m_sSource
                Private m_sDescription
                Private m_sHelpContext
                Private m_sHelpFile
                Public Sub Save()
                m_lNumber = Err.number
                m_sSource = Err.Source
                m_sDescription = Err.Description
                m_sHelpContext = Err.HelpContext
                m_sHelpFile = Err.helpfile
                End Sub
                Public Sub Raise()
                Err.Raise m_lNumber, m_sSource, m_sDescription, m_sHelpFile, m_sHelpContext
                End Sub
                Public Sub Clear()
                m_lNumber = 0
                m_sSource = ""
                m_sDescription = ""
                m_sHelpContext = ""
                m_sHelpFile = ""
                End Sub
                Public Default Property Get Number()
                Number = m_lNumber
                End Property
                Public Property Get Source()
                Source = m_sSource
                End Property
                Public Property Get Description()
                Description = m_sDescription
                End Property
                Public Property Get HelpContext()
                HelpContext = m_sHelpContext
                End Property
                Public Property Get HelpFile()
                HelpFile = m_sHelpFile
                End Property
                End Class

                '---------------------------------------------------------------------------
                ' Creates an event and sends it back to the mom server.
                '---------------------------------------------------------------------------
                Function ThrowScriptErrorNoAbort(ByVal sMessage, ByVal oErr)
                ' Retrieve the name of this (running) script
                Dim FSO, ScriptFileName
                Set FSO = CreateObject("Scripting.FileSystemObject")
                ScriptFileName = FSO.GetFile(WScript.ScriptFullName).Name
                Set FSO = Nothing

                If Not IsNull(oErr) Then _
                sMessage = sMessage &amp; ". " &amp; oErr.Description

                On Error Resume Next
                Dim oAPITemp
                Set oAPITemp = CreateObject("MOM.ScriptAPI")
                oAPITemp.LogScriptEvent ScriptFileName, g_ErrorEventNumber, lsEventError, sMessage
                On Error Goto 0

                WScript.Echo sMessage
                End Function

                '---------------------------------------------------------------------------
                ' Creates an event and sends it back to the mom server.
                '---------------------------------------------------------------------------
                Function ThrowScriptError(Byval sMessage, ByVal oErr)
                On Error Resume Next
                ThrowScriptErrorNoAbort sMessage, oErr
                Quit()
                End Function

                '---------------------------------------------------------------------------
                ' Creates automation objects and returns it.
                '---------------------------------------------------------------------------
                Function MomCreateObject(ByVal sProgramId)
                Dim oError
                Set oError = New Error

                On Error Resume Next
                Set MomCreateObject = CreateObject(sProgramId)
                oError.Save
                On Error Goto 0

                If oError.Number &lt;&gt; 0 Then
                ThrowScriptError "Unable to create automation object '" &amp; sProgramId &amp; "'", oError
                End If
                End Function

                '---------------------------------------------------------------------------
                ' Quits the script.
                '---------------------------------------------------------------------------
                Function Quit()
                WScript.Quit()
                End Function

                '---------------------------------------------------------------------------
                ' Checks whether oObject is valid.
                '---------------------------------------------------------------------------
                Function IsValidObject(ByVal oObject)
                IsValidObject = False
                If IsObject(oObject) Then
                If Not oObject Is Nothing Then
                IsValidObject = True
                End If
                End If
                End Function

                '---------------------------------------------------------------------------
                ' Outputs arguments for debugging purposes
                '---------------------------------------------------------------------------
                Function TraceLogArguments
                Dim oArgs
                Set oArgs = WScript.Arguments
                Dim i, sArgs
                For i = 0 To oArgs.Count - 1
                sArgs = sArgs &amp; " {" &amp; oArgs(i) &amp; "}"
                Next
                TraceLogMessage "Arguments:" &amp; sArgs
                End Function

                '---------------------------------------------------------------------------
                ' Verifies that number of arguments is correct
                '---------------------------------------------------------------------------
                Function VerifyNumberOfArguments(ByVal NumberOfArguments)
                Dim oArgs
                Set oArgs = WScript.Arguments
                If oArgs.Count &lt;&gt; NumberOfArguments Then
                Dim i, sArgs
                For i = 0 To oArgs.Count - 1
                sArgs = sArgs &amp; " {" &amp; oArgs(i) &amp; "}"
                Next
                ThrowScriptError "Invalid number of arguments (" &amp; oArgs.Count &amp; " instead of " &amp; NumberOfArguments &amp; "). Arguments:" &amp; sArgs, Null
                End If
                End Function

                '---------------------------------------------------------------------------
                ' Outputs to file and echo for debugging purposes
                '---------------------------------------------------------------------------
                Function TraceLogMessage(ByVal sMessage)
                WScript.Echo sMessage

                If g_DebugFlag = True Then
                ' Retrieve the name of this (running) script
                Dim FSO, ScriptFileName
                Set FSO = CreateObject("Scripting.FileSystemObject")
                ScriptFileName = FSO.GetFile(WScript.ScriptFullName).Name
                Set FSO = Nothing

                On Error Resume Next
                Dim oAPITemp
                Set oAPITemp = MOMCreateObject("MOM.ScriptAPI")
                oAPITemp.LogScriptEvent ScriptFileName, g_TraceEventNumber, lsEventInformation, sMessage
                On Error Goto 0
                End If
                End Function

                '---------------------------------------------------------------------------
                ' Verifies the expression. If equals to False then generates an error and quits the script
                '   Usage:
                '     Verify Not WMISet Is Nothing, "WMISet is invalid!"
                '     Verify WMISet.Count = 1, "Invalid quantity of services with name 'Server' (qty = " &amp; WMISet.Count &amp; ")."
                '---------------------------------------------------------------------------
                Function Verify(ByVal bBool, ByVal sMessage)
                If bBool = False Then
                ThrowScriptError sMessage, Null
                End If
                End Function


                Function GetRegistryKeyValue(ByVal keyPath, ByVal key)
                Dim oReg, strKeyValue

                Set oReg = MOMCreateObject("WScript.Shell")
                On Error Resume Next

                strKeyValue = oReg.RegRead(keyPath &amp; key)
                If Err.Number &lt;&gt; 0 Then
                ThrowScriptError "An error occurred while reading the registry: '" &amp; keyPath &amp; key &amp; "'", Err.Description
                strKeyValue = ""
                End If

                ' resume error
                On Error Goto 0

                GetRegistryKeyValue = strKeyValue
                End Function

                '---------------------------------------------------------------------------
                ' Function: ExpressedInMB
                '   Usage:
                '     Parameter (SizeInBytes)
                '     Returns the Size Expressed in MBytes
                '---------------------------------------------------------------------------
                Function ExpressedInMB(byref SizeInBytes)
                Dim NumberSizeExpInMB
                NumberSizeExpInMB = Round(SizeInBytes / DISKSIZE_BYTES_IN_MB, 0)
                ExpressedInMB = NumberSizeExpInMB
                End Function

                'Copyright (c) Microsoft Corporation. All rights reserved.
                '
                ' Parameters that should be passed to this script
                ' 0 Computer (FQDN)
                ' 1 Debug Flag          - If True then script can output some trace information to event log.

                Const BYTES_IN_MB = 1048576 '=2^20

                Call Main

                Sub Main()
                VerifyNumberOfArguments(2)

                Dim oArgs
                Set oArgs = WScript.Arguments
                Dim TargetComputer
                TargetComputer = oArgs(0)
                g_DebugFlag = CBool(oArgs(1))

                TraceLogArguments

                Dim oAPI, oBag
                Set oAPI = MOMCreateObject("MOM.ScriptAPI")


                Dim IsVolumeInfoSupported, SystemDrive
                IsVolumeInfoSupported = Is_Win32_Volume_Supported(TargetComputer)
                SystemDrive = Get_System_Drive(TargetComputer)

                Dim oWmiDiskSet, oWmiDisk

                If IsVolumeInfoSupported Then
                Set oWmiDiskSet = WMIGetInstance("winmgmts:\\" + TargetComputer &amp; "\root\cimv2", "Win32_Volume")
                Else
                Set oWmiDiskSet = WMIExecQuery("winmgmts:\\" + TargetComputer &amp; "\root\cimv2", "select * from Win32_LogicalDisk where (DriveType=3 or DriveType=6) and FileSystem != null")
                End If

                For Each oWmiDisk in oWmiDiskSet
                If oWmiDisk.DriveType = 3 Then
                Dim sDriveLetter, nFreeSpace, nMaxSize, nPctFree, nMBFree

                nFreeSpace = oWmiDisk.FreeSpace
                If IsNull(nFreeSpace) Then _
                nFreeSpace = 0

                If IsVolumeInfoSupported Then
                sDriveLetter = oWmiDisk.DriveLetter
                nMaxSize = oWmiDisk.Capacity
                If IsNull(sDriveLetter) Then
                sDriveLetter  = oWmiDisk.Name
                sDriveLetter = Left(sDriveLetter, Len(sDriveLetter)-1)
                End If
                Else
                sDriveLetter = oWmiDisk.DeviceId
                nMaxSize = oWmiDisk.Size
                End If

                ' If nMaxSize is null or 0 then drive is not formatted - do not return property bag for it.
                If Not IsNull(nMaxSize) And nMaxSize &gt; 0 Then
                nPctFree = Round(nFreeSpace / nMaxSize * 100, 0)
                nMBFree = Round(nFreeSpace / BYTES_IN_MB, 0)

                Set oBag = oAPI.CreatePropertyBag()
                oBag.AddValue "PctFree", nPctFree &amp; ""
                oBag.AddValue "MbFree", nMBFree &amp; ""
                oBag.AddValue "DiskLabel", sDriveLetter
                If sDriveLetter = SystemDrive Then
                oBag.AddValue "IsSystem", "true"
                Else
                oBag.AddValue "IsSystem", "false"
                End If
                oAPI.AddItem oBag
                End If
                End If
                Next

                oAPI.ReturnItems
                End Sub

                Function Is_Win32_Volume_Supported(ByRef TargetComputer)
                Dim objWMISet, objWMIOS, blnRet
                blnRet = False
                Set objWMISet = WMIGetInstance("winmgmts:\\" &amp; TargetComputer &amp; "\root\cimv2", "Win32_OperatingSystem")
                For Each objWMIOS in objWMISet
                If CLng(objWMIOS.BuildNumber) &gt;= 3624 Then blnRet = True
                Next
                Is_Win32_Volume_Supported = blnRet
                End Function

                Function Get_System_Drive(ByRef TargetComputer)
                Dim objWMISet, objWMIOS
                Get_System_Drive = ""
                Set objWMISet = WMIGetInstance("winmgmts:\\" &amp; TargetComputer &amp; "\root\cimv2", "Win32_OperatingSystem")
                For Each objWMIOS in objWMISet
                Get_System_Drive = Left(objWMIOS.SystemDirectory, 2)
                Next
                End Function
              </ScriptBody>
              <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
            </DataSource>
          </MemberModules>
          <Composition>
            <Node ID="DS" />
          </Composition>
        </Composite>
      </ModuleImplementation>
      <OutputType>System!System.PropertyBagData</OutputType>
    </DataSourceModuleType>
  </ModuleTypes>
  <MonitorTypes>
      <UnitMonitorType ID="Microsoft.Unix.WSMan.LogicalDisk.FreeSpace.TwoState.MonitorType" Accessibility="Public">
        <MonitorTypeStates>
          <MonitorTypeState ID="UnderThreshold" NoDetection="false" />
          <MonitorTypeState ID="OverThreshold" NoDetection="false" />
        </MonitorTypeStates>
        <Configuration>
          <IncludeSchemaTypes>
            <SchemaType>System!System.ExpressionEvaluatorSchema</SchemaType>
          </IncludeSchemaTypes>
          <xsd:element name="TargetSystem" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="Uri" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="Filter" type="xsd:string" minOccurs="0" maxOccurs="1" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="SplitItems" type="xsd:boolean" minOccurs="0" maxOccurs="1" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="Interval" type="xsd:unsignedInt" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="SyncTime" type="xsd:string" minOccurs="0" maxOccurs="1" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="InstanceName" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="PctThreshold" type="xsd:double" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="MBThreshold" type="xsd:double" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="Interval" Selector="$Config/Interval$" ParameterType="int" />
          <OverrideableParameter ID="SyncTime" Selector="$Config/SyncTime$" ParameterType="string" />
          <OverrideableParameter ID="PctThreshold" Selector="$Config/PctThreshold$" ParameterType="double" />
          <OverrideableParameter ID="MBThreshold" Selector="$Config/MBThreshold$" ParameterType="double" />
        </OverrideableParameters>
        <MonitorImplementation>
          <MemberModules>
            <DataSource ID="DS" TypeID="Unix!Microsoft.Unix.WSMan.TimedEnumerator.Filtered">
              <TargetSystem>$Config/TargetSystem$</TargetSystem>
              <Uri>$Config/Uri$</Uri>
              <Filter>$Config/Filter$</Filter>
              <SplitItems>$Config/SplitItems$</SplitItems>
              <Interval>$Config/Interval$</Interval>
              <SyncTime>$Config/SyncTime$</SyncTime>
              <InstanceName>$Config/InstanceName$</InstanceName>
              <InstanceProperty>/DataItem/WsManData/*[local-name(.)='SCX_FileSystemStatisticalInformation']/*[local-name(.)='Name']</InstanceProperty>
            </DataSource>
            <ConditionDetection ID="CDUnderThreshold" TypeID="System!System.ExpressionFilter">
              <Expression>
                <And>
                  <Expression>
                    <SimpleExpression>
                      <ValueExpression>
                        <XPathQuery Type="Double">/DataItem/WsManData/*[local-name(.)='SCX_FileSystemStatisticalInformation']/*[local-name(.)='PercentFreeSpace']</XPathQuery>
                      </ValueExpression>
                      <Operator>Less</Operator>
                      <ValueExpression>
                        <Value Type="Double">$Config/PctThreshold$</Value>
                      </ValueExpression>
                    </SimpleExpression>
                  </Expression>
                  <Expression>
                    <SimpleExpression>
                      <ValueExpression>
                        <XPathQuery Type="Double">/DataItem/WsManData/*[local-name(.)='SCX_FileSystemStatisticalInformation']/*[local-name(.)='FreeMegabytes']</XPathQuery>
                      </ValueExpression>
                      <Operator>Less</Operator>
                      <ValueExpression>
                        <Value Type="Double">$Config/MBThreshold$</Value>
                      </ValueExpression>
                    </SimpleExpression>
                  </Expression>
                </And>
              </Expression>
            </ConditionDetection>
            <ConditionDetection ID="CDOverThreshold" TypeID="System!System.ExpressionFilter">
              <Expression>
                <Or>
                  <Expression>
                    <SimpleExpression>
                      <ValueExpression>
                        <XPathQuery Type="Double">/DataItem/WsManData/*[local-name(.)='SCX_FileSystemStatisticalInformation']/*[local-name(.)='PercentFreeSpace']</XPathQuery>
                      </ValueExpression>
                      <Operator>GreaterEqual</Operator>
                      <ValueExpression>
                        <Value Type="Double">$Config/PctThreshold$</Value>
                      </ValueExpression>
                    </SimpleExpression>
                  </Expression>
                  <Expression>
                    <SimpleExpression>
                      <ValueExpression>
                        <XPathQuery Type="Double">/DataItem/WsManData/*[local-name(.)='SCX_FileSystemStatisticalInformation']/*[local-name(.)='FreeMegabytes']</XPathQuery>
                      </ValueExpression>
                      <Operator>GreaterEqual</Operator>
                      <ValueExpression>
                        <Value Type="Double">$Config/MBThreshold$</Value>
                      </ValueExpression>
                    </SimpleExpression>
                  </Expression>
                </Or>
              </Expression>
            </ConditionDetection>
          </MemberModules>
          <RegularDetections>
            <RegularDetection MonitorTypeStateID="UnderThreshold">
              <Node ID="CDUnderThreshold">
                <Node ID="DS" />
              </Node>
            </RegularDetection>
            <RegularDetection MonitorTypeStateID="OverThreshold">
              <Node ID="CDOverThreshold">
                <Node ID="DS" />
              </Node>
            </RegularDetection>
          </RegularDetections>
        </MonitorImplementation>
      </UnitMonitorType>
    <UnitMonitorType ID="Example.2x2.Windows.Server.Legacy.LogicalDisk.FreeSpace.TwoState.Monitortype" Accessibility="Public">
      <MonitorTypeStates>
        <MonitorTypeState ID="UnderThreshold" NoDetection="false" />
        <MonitorTypeState ID="OverEqualThreshold" NoDetection="false" />
      </MonitorTypeStates>
      <Configuration>
        <xsd:element name="IntervalSeconds" type="xsd:int" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        <xsd:element name="TargetComputerName" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        <xsd:element name="SystemDriveMBytesThreshold" type="xsd:double" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        <xsd:element name="SystemDrivePercentThreshold" type="xsd:double" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        <xsd:element name="NonSystemDriveMBytesThreshold" type="xsd:double" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        <xsd:element name="NonSystemDrivePercentThreshold" type="xsd:double" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        <xsd:element name="DiskLabel" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        <xsd:element name="TimeoutSeconds" type="xsd:int" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        <xsd:element name="DebugFlag" type="xsd:boolean" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
      </Configuration>
      <OverrideableParameters>
        <OverrideableParameter ID="IntervalSeconds" Selector="$Config/IntervalSeconds$" ParameterType="int" />
        <OverrideableParameter ID="SystemDriveMBytesThreshold" Selector="$Config/SystemDriveMBytesThreshold$" ParameterType="double" />
        <OverrideableParameter ID="SystemDrivePercentThreshold" Selector="$Config/SystemDrivePercentThreshold$" ParameterType="double" />
        <OverrideableParameter ID="NonSystemDriveMBytesThreshold" Selector="$Config/NonSystemDriveMBytesThreshold$" ParameterType="double" />
        <OverrideableParameter ID="NonSystemDrivePercentThreshold" Selector="$Config/NonSystemDrivePercentThreshold$" ParameterType="double" />
        <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
        <OverrideableParameter ID="DebugFlag" Selector="$Config/DebugFlag$" ParameterType="bool" />
      </OverrideableParameters>
      <MonitorImplementation>
        <MemberModules>
          <DataSource ID="ScriptDS" TypeID="Microsoft.Windows.Server.Legacy.LogicalDisk.FreeSpace.ModuleType">
            <IntervalSeconds>$Config/IntervalSeconds$</IntervalSeconds>
            <TargetComputerName>$Config/TargetComputerName$</TargetComputerName>
            <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
            <DebugFlag>$Config/DebugFlag$</DebugFlag>
          </DataSource>
          <ConditionDetection ID="FilterOK" TypeID="System!System.ExpressionFilter">
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">Property[@Name='DiskLabel']</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="String">$Config/DiskLabel$</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <Not>
                    <Expression>
                      <Or>
                        <Expression>
                          <And>
                            <Expression>
                              <SimpleExpression>
                                <ValueExpression>
                                  <XPathQuery Type="Boolean">Property[@Name='IsSystem']</XPathQuery>
                                </ValueExpression>
                                <Operator>Equal</Operator>
                                <ValueExpression>
                                  <Value Type="Boolean">true</Value>
                                </ValueExpression>
                              </SimpleExpression>
                            </Expression>
                            <Expression>
                              <SimpleExpression>
                                <ValueExpression>
                                  <XPathQuery Type="Double">Property[@Name='PctFree']</XPathQuery>
                                </ValueExpression>
                                <Operator>Less</Operator>
                                <ValueExpression>
                                  <Value Type="Double">$Config/SystemDrivePercentThreshold$</Value>
                                </ValueExpression>
                              </SimpleExpression>
                            </Expression>
                            <Expression>
                              <SimpleExpression>
                                <ValueExpression>
                                  <XPathQuery Type="Double">Property[@Name='MbFree']</XPathQuery>
                                </ValueExpression>
                                <Operator>Less</Operator>
                                <ValueExpression>
                                  <Value Type="Double">$Config/SystemDriveMBytesThreshold$</Value>
                                </ValueExpression>
                              </SimpleExpression>
                            </Expression>
                          </And>
                        </Expression>
                        <Expression>
                          <And>
                            <Expression>
                              <SimpleExpression>
                                <ValueExpression>
                                  <XPathQuery Type="Boolean">Property[@Name='IsSystem']</XPathQuery>
                                </ValueExpression>
                                <Operator>Equal</Operator>
                                <ValueExpression>
                                  <Value Type="Boolean">false</Value>
                                </ValueExpression>
                              </SimpleExpression>
                            </Expression>
                            <Expression>
                              <SimpleExpression>
                                <ValueExpression>
                                  <XPathQuery Type="Double">Property[@Name='PctFree']</XPathQuery>
                                </ValueExpression>
                                <Operator>Less</Operator>
                                <ValueExpression>
                                  <Value Type="Double">$Config/NonSystemDrivePercentThreshold$</Value>
                                </ValueExpression>
                              </SimpleExpression>
                            </Expression>
                            <Expression>
                              <SimpleExpression>
                                <ValueExpression>
                                  <XPathQuery Type="Double">Property[@Name='MbFree']</XPathQuery>
                                </ValueExpression>
                                <Operator>Less</Operator>
                                <ValueExpression>
                                  <Value Type="Double">$Config/NonSystemDriveMBytesThreshold$</Value>
                                </ValueExpression>
                              </SimpleExpression>
                            </Expression>
                          </And>
                        </Expression>
                      </Or>
                    </Expression>
                  </Not>
                </Expression>
              </And>
            </Expression>
          </ConditionDetection>
          <ConditionDetection ID="FilterNotOK" TypeID="System!System.ExpressionFilter">
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">Property[@Name='DiskLabel']</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="String">$Config/DiskLabel$</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <Or>
                    <Expression>
                      <And>
                        <Expression>
                          <SimpleExpression>
                            <ValueExpression>
                              <XPathQuery Type="Boolean">Property[@Name='IsSystem']</XPathQuery>
                            </ValueExpression>
                            <Operator>Equal</Operator>
                            <ValueExpression>
                              <Value Type="Boolean">true</Value>
                            </ValueExpression>
                          </SimpleExpression>
                        </Expression>
                        <Expression>
                          <SimpleExpression>
                            <ValueExpression>
                              <XPathQuery Type="Double">Property[@Name='PctFree']</XPathQuery>
                            </ValueExpression>
                            <Operator>Less</Operator>
                            <ValueExpression>
                              <Value Type="Double">$Config/SystemDrivePercentThreshold$</Value>
                            </ValueExpression>
                          </SimpleExpression>
                        </Expression>
                        <Expression>
                          <SimpleExpression>
                            <ValueExpression>
                              <XPathQuery Type="Double">Property[@Name='MbFree']</XPathQuery>
                            </ValueExpression>
                            <Operator>Less</Operator>
                            <ValueExpression>
                              <Value Type="Double">$Config/SystemDriveMBytesThreshold$</Value>
                            </ValueExpression>
                          </SimpleExpression>
                        </Expression>
                      </And>
                    </Expression>
                    <Expression>
                      <And>
                        <Expression>
                          <SimpleExpression>
                            <ValueExpression>
                              <XPathQuery Type="Boolean">Property[@Name='IsSystem']</XPathQuery>
                            </ValueExpression>
                            <Operator>Equal</Operator>
                            <ValueExpression>
                              <Value Type="Boolean">false</Value>
                            </ValueExpression>
                          </SimpleExpression>
                        </Expression>
                        <Expression>
                          <SimpleExpression>
                            <ValueExpression>
                              <XPathQuery Type="Double">Property[@Name='PctFree']</XPathQuery>
                            </ValueExpression>
                            <Operator>Less</Operator>
                            <ValueExpression>
                              <Value Type="Double">$Config/NonSystemDrivePercentThreshold$</Value>
                            </ValueExpression>
                          </SimpleExpression>
                        </Expression>
                        <Expression>
                          <SimpleExpression>
                            <ValueExpression>
                              <XPathQuery Type="Double">Property[@Name='MbFree']</XPathQuery>
                            </ValueExpression>
                            <Operator>Less</Operator>
                            <ValueExpression>
                              <Value Type="Double">$Config/NonSystemDriveMBytesThreshold$</Value>
                            </ValueExpression>
                          </SimpleExpression>
                        </Expression>
                      </And>
                    </Expression>
                  </Or>
                </Expression>
              </And>
            </Expression>
          </ConditionDetection>
        </MemberModules>
        <RegularDetections>
          <RegularDetection MonitorTypeStateID="OverEqualThreshold">
            <Node ID="FilterOK">
              <Node ID="ScriptDS" />
            </Node>
          </RegularDetection>
          <RegularDetection MonitorTypeStateID="UnderThreshold">
            <Node ID="FilterNotOK">
              <Node ID="ScriptDS" />
            </Node>
          </RegularDetection>
        </RegularDetections>
      </MonitorImplementation>
    </UnitMonitorType>
  </MonitorTypes>
</TypeDefinitions>
  <Monitoring>
    <Monitors>
      <UnitMonitor ID="Example.2x2.UnixLinux.LogicalDisk.FreeSpace.Warning.Monitor" Accessibility="Public" Enabled="false" Target="Unix!Microsoft.Unix.LogicalDisk" ParentMonitorID="Health!System.Health.AvailabilityState" Remotable="true" Priority="Normal" TypeID="Microsoft.Unix.WSMan.LogicalDisk.FreeSpace.TwoState.MonitorType" ConfirmDelivery="false">
        <Category>AvailabilityHealth</Category>
        <AlertSettings AlertMessage="Example.2x2.UnixLinux.LogicalDisk.FreeSpace.Warning.AlertMessage">
          <AlertOnState>Warning</AlertOnState>
          <AutoResolve>true</AutoResolve>
          <AlertPriority>Normal</AlertPriority>
          <AlertSeverity>MatchMonitorHealth</AlertSeverity>
          <AlertParameters>
            <AlertParameter1>$Data/Context/WsManData/*[local-name(.)='SCX_FileSystemStatisticalInformation']/*[local-name(.)='PercentFreeSpace']$</AlertParameter1>
            <AlertParameter2>$Data/Context/WsManData/*[local-name(.)='SCX_FileSystemStatisticalInformation']/*[local-name(.)='FreeMegabytes']$</AlertParameter2>
          </AlertParameters>
        </AlertSettings>
        <OperationalStates>
          <OperationalState ID="UnderThreshold" MonitorTypeStateID="UnderThreshold" HealthState="Warning" />
          <OperationalState ID="OverThreshold" MonitorTypeStateID="OverThreshold" HealthState="Success" />
        </OperationalStates>
        <Configuration>
          <TargetSystem>$Target/Host/Property[Type="Unix!Microsoft.Unix.Computer"]/NetworkName$</TargetSystem>
          <Uri>http://schemas.microsoft.com/wbem/wscim/1/cim-schema/2/SCX_FileSystemStatisticalInformation?__cimnamespace=root/scx</Uri>
          <Filter />
          <SplitItems>true</SplitItems>
          <Interval>300</Interval>
          <InstanceName>$Target/Property[Type="Unix!Microsoft.Unix.LogicalDevice"]/DeviceID$</InstanceName>
          <PctThreshold>15</PctThreshold>
          <MBThreshold>2000</MBThreshold>
        </Configuration>
      </UnitMonitor>
      <UnitMonitor ID="Example.2x2.UnixLinux.LogicalDisk.FreeSpace.Critical.Monitor" Accessibility="Public" Enabled="false" Target="Unix!Microsoft.Unix.LogicalDisk" ParentMonitorID="Health!System.Health.AvailabilityState" Remotable="true" Priority="Normal" TypeID="Microsoft.Unix.WSMan.LogicalDisk.FreeSpace.TwoState.MonitorType" ConfirmDelivery="false">
        <Category>AvailabilityHealth</Category>
        <AlertSettings AlertMessage="Example.2x2.UnixLinux.LogicalDisk.FreeSpace.Critical.AlertMessage">
          <AlertOnState>Error</AlertOnState>
          <AutoResolve>true</AutoResolve>
          <AlertPriority>Normal</AlertPriority>
          <AlertSeverity>MatchMonitorHealth</AlertSeverity>
          <AlertParameters>
            <AlertParameter1>$Data/Context/WsManData/*[local-name(.)='SCX_FileSystemStatisticalInformation']/*[local-name(.)='PercentFreeSpace']$</AlertParameter1>
            <AlertParameter2>$Data/Context/WsManData/*[local-name(.)='SCX_FileSystemStatisticalInformation']/*[local-name(.)='FreeMegabytes']$</AlertParameter2>
          </AlertParameters>
        </AlertSettings>
        <OperationalStates>
          <OperationalState ID="UnderThreshold" MonitorTypeStateID="UnderThreshold" HealthState="Error" />
          <OperationalState ID="OverThreshold" MonitorTypeStateID="OverThreshold" HealthState="Success" />
        </OperationalStates>
        <Configuration>
          <TargetSystem>$Target/Host/Property[Type="Unix!Microsoft.Unix.Computer"]/NetworkName$</TargetSystem>
          <Uri>http://schemas.microsoft.com/wbem/wscim/1/cim-schema/2/SCX_FileSystemStatisticalInformation?__cimnamespace=root/scx</Uri>
          <Filter />
          <SplitItems>true</SplitItems>
          <Interval>300</Interval>
          <InstanceName>$Target/Property[Type="Unix!Microsoft.Unix.LogicalDevice"]/DeviceID$</InstanceName>
          <PctThreshold>10</PctThreshold>
          <MBThreshold>1000</MBThreshold>
        </Configuration>
      </UnitMonitor>
      <UnitMonitor ID="Example.2x2.Windows.Server.Legacy.LogicalDisk.FreeSpace.Critical.Monitor" Accessibility="Public" Enabled="false" Target="Windows!Microsoft.Windows.LogicalDisk" ParentMonitorID="Health!System.Health.AvailabilityState" Remotable="true" Priority="Normal" TypeID="Example.2x2.Windows.Server.Legacy.LogicalDisk.FreeSpace.TwoState.Monitortype" ConfirmDelivery="false">
        <Category>AvailabilityHealth</Category>
        <AlertSettings AlertMessage="Example.2x2.Windows.Server.Legacy.LogicalDisk.FreeSpace.Critical.Monitor.AlertMessage">
          <AlertOnState>Error</AlertOnState>
          <AutoResolve>true</AutoResolve>
          <AlertPriority>Normal</AlertPriority>
          <AlertSeverity>MatchMonitorHealth</AlertSeverity>
          <AlertParameters>
            <AlertParameter1>$Target/Property[Type="Windows!Microsoft.Windows.LogicalDevice"]/DeviceID$</AlertParameter1>
            <AlertParameter2>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/PrincipalName$</AlertParameter2>
            <AlertParameter3>$Data/Context/Property[@Name='PctFree']$</AlertParameter3>
            <AlertParameter4>$Data/Context/Property[@Name='MbFree']$</AlertParameter4>
          </AlertParameters>
        </AlertSettings>
        <OperationalStates>
          <OperationalState ID="OverEqualThreshold" MonitorTypeStateID="OverEqualThreshold" HealthState="Success" />
          <OperationalState ID="UnderThreshold" MonitorTypeStateID="UnderThreshold" HealthState="Error" />
        </OperationalStates>
        <Configuration>
          <IntervalSeconds>3600</IntervalSeconds>
          <TargetComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</TargetComputerName>
          <SystemDriveMBytesThreshold>300</SystemDriveMBytesThreshold>
          <SystemDrivePercentThreshold>5</SystemDrivePercentThreshold>
          <NonSystemDriveMBytesThreshold>1000</NonSystemDriveMBytesThreshold>
          <NonSystemDrivePercentThreshold>5</NonSystemDrivePercentThreshold>
          <DiskLabel>$Target/Property[Type="Windows!Microsoft.Windows.LogicalDevice"]/DeviceID$</DiskLabel>
          <TimeoutSeconds>360</TimeoutSeconds>
          <DebugFlag>false</DebugFlag>
        </Configuration>
      </UnitMonitor>
      <UnitMonitor ID="Example.2x2.Windows.Server.Legacy.LogicalDisk.FreeSpace.Warning.Monitor" Accessibility="Public" Enabled="false" Target="Windows!Microsoft.Windows.LogicalDisk" ParentMonitorID="Health!System.Health.AvailabilityState" Remotable="true" Priority="Normal" TypeID="Example.2x2.Windows.Server.Legacy.LogicalDisk.FreeSpace.TwoState.Monitortype" ConfirmDelivery="false">
        <Category>AvailabilityHealth</Category>
        <AlertSettings AlertMessage="Example.2x2.Windows.Server.Legacy.LogicalDisk.FreeSpace.Warning.Monitor.AlertMessage">
          <AlertOnState>Error</AlertOnState>
          <AutoResolve>true</AutoResolve>
          <AlertPriority>Normal</AlertPriority>
          <AlertSeverity>MatchMonitorHealth</AlertSeverity>
          <AlertParameters>
            <AlertParameter1>$Target/Property[Type="Windows!Microsoft.Windows.LogicalDevice"]/DeviceID$</AlertParameter1>
            <AlertParameter2>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/PrincipalName$</AlertParameter2>
            <AlertParameter3>$Data/Context/Property[@Name='PctFree']$</AlertParameter3>
            <AlertParameter4>$Data/Context/Property[@Name='MbFree']$</AlertParameter4>
          </AlertParameters>
        </AlertSettings>
        <OperationalStates>
          <OperationalState ID="OverEqualThreshold" MonitorTypeStateID="OverEqualThreshold" HealthState="Success" />
          <OperationalState ID="UnderThreshold" MonitorTypeStateID="UnderThreshold" HealthState="Error" />
        </OperationalStates>
        <Configuration>
          <IntervalSeconds>3600</IntervalSeconds>
          <TargetComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</TargetComputerName>
          <SystemDriveMBytesThreshold>500</SystemDriveMBytesThreshold>
          <SystemDrivePercentThreshold>10</SystemDrivePercentThreshold>
          <NonSystemDriveMBytesThreshold>2000</NonSystemDriveMBytesThreshold>
          <NonSystemDrivePercentThreshold>10</NonSystemDrivePercentThreshold>
          <DiskLabel>$Target/Property[Type="Windows!Microsoft.Windows.LogicalDevice"]/DeviceID$</DiskLabel>
          <TimeoutSeconds>360</TimeoutSeconds>
          <DebugFlag>false</DebugFlag>
        </Configuration>
      </UnitMonitor>
    </Monitors>
  </Monitoring>
  <Presentation>
    <StringResources>
      <StringResource ID="Example.2x2.UnixLinux.LogicalDisk.FreeSpace.Warning.AlertMessage" />
      <StringResource ID="Example.2x2.UnixLinux.LogicalDisk.FreeSpace.Critical.AlertMessage" />
      <StringResource ID="Example.2x2.Windows.Server.Legacy.LogicalDisk.FreeSpace.Warning.Monitor.AlertMessage" />
      <StringResource ID="Example.2x2.Windows.Server.Legacy.LogicalDisk.FreeSpace.Critical.Monitor.AlertMessage" />      
    </StringResources>
  </Presentation>
  <LanguagePacks>
    <LanguagePack ID="ENU" IsDefault="true">
      <DisplayStrings>
        <DisplayString ElementID="Example.2x2.UnixLinux.LogicalDisk.FreeSpace.Warning.Monitor">
          <Name>UNIX/Linux Logical Disk Free Space Warning</Name>
          <Description>Logical Disk Free Space Monitor</Description>
        </DisplayString>
        <DisplayString ElementID="Example.2x2.UnixLinux.LogicalDisk.FreeSpace.Warning.Monitor" SubElementID="UnderThreshold">
          <Name>Logical Disk Free Space is under Threshold</Name>
          <Description>Logical Disk Free Space Monitor is under Error Threshold</Description>
        </DisplayString>
        <DisplayString ElementID="Example.2x2.UnixLinux.LogicalDisk.FreeSpace.Warning.Monitor" SubElementID="OverThreshold">
          <Name>Logical Disk Free Space is over Threshold</Name>
          <Description>Logical Disk Free Space Monitor is over Threshold</Description>
        </DisplayString>
        <DisplayString ElementID="Example.2x2.UnixLinux.LogicalDisk.FreeSpace.Warning.AlertMessage">
          <Name>Warning - Logical Disk Free Space is too low</Name>
          <Description>The thresholds for the Logical Disk Free Space monitor have been exceeded. The values that exceeded the threshold are: {0}% and {1}MB Free Space.</Description>
        </DisplayString>
        <DisplayString ElementID="Example.2x2.UnixLinux.LogicalDisk.FreeSpace.Critical.Monitor">
          <Name>UNIX/Linux Logical Disk Free Space Critical</Name>
          <Description>Logical Disk Free Space Monitor</Description>
        </DisplayString>
        <DisplayString ElementID="Example.2x2.UnixLinux.LogicalDisk.FreeSpace.Critical.Monitor" SubElementID="UnderThreshold">
          <Name>Logical Disk Free Space is under Threshold</Name>
          <Description>Logical Disk Free Space Monitor is under Error Threshold</Description>
        </DisplayString>
        <DisplayString ElementID="Example.2x2.UnixLinux.LogicalDisk.FreeSpace.Critical.Monitor" SubElementID="OverThreshold">
          <Name>Logical Disk Free Space is over Threshold</Name>
          <Description>Logical Disk Free Space Monitor is over Threshold</Description>
        </DisplayString>
        <DisplayString ElementID="Example.2x2.UnixLinux.LogicalDisk.FreeSpace.Critical.AlertMessage">
          <Name>CRITICAL - Logical Disk Free Space is too low</Name>
          <Description>The thresholds for the Logical Disk Free Space monitor have been exceeded. The values that exceeded the threshold are: {0}% and {1}MB Free Space.</Description>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.Server.Legacy.LogicalDisk.FreeSpace.ModuleType">
          <Name>Windows Logical Disk Free Space Data Source Module</Name>
          <Description>Monitor the Logical Disk Free Space on Windows Servers</Description>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.Server.Legacy.LogicalDisk.FreeSpace.ModuleType" SubElementID="IntervalSeconds">
          <Name>Interval seconds</Name>
          <Description>How frequently (in seconds) the value should be sampled.</Description>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.Server.Legacy.LogicalDisk.FreeSpace.ModuleType" SubElementID="TimeoutSeconds">
          <Name>Timeout Seconds</Name>
          <Description>Number of seconds that the script is allowed to run before it will be forced to stop.</Description>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.Server.Legacy.LogicalDisk.FreeSpace.ModuleType" SubElementID="DebugFlag">
          <Name>Debug Flag</Name>
          <Description>This setting enables the script to log different events at running time</Description>
        </DisplayString>
        <DisplayString ElementID="Example.2x2.Windows.Server.Legacy.LogicalDisk.FreeSpace.TwoState.Monitortype">
          <Name>Windows Logical Disk Free Space Monitor Type</Name>
        </DisplayString>
        <DisplayString ElementID="Example.2x2.Windows.Server.Legacy.LogicalDisk.FreeSpace.TwoState.Monitortype" SubElementID="IntervalSeconds">
          <Name>IntervalSeconds</Name>
          <Description>Interval in seconds</Description>
        </DisplayString>
        <DisplayString ElementID="Example.2x2.Windows.Server.Legacy.LogicalDisk.FreeSpace.TwoState.Monitortype" SubElementID="SystemDriveMBytesThreshold">
          <Name>MBytes Threshold for System Drives</Name>
          <Description>Error MBytes Threshold for System Drives</Description>
        </DisplayString>
        <DisplayString ElementID="Example.2x2.Windows.Server.Legacy.LogicalDisk.FreeSpace.TwoState.Monitortype" SubElementID="SystemDrivePercentThreshold">
          <Name>%Threshold for System Drives</Name>
          <Description>Error % Threshold for System Drives</Description>
        </DisplayString>
        <DisplayString ElementID="Example.2x2.Windows.Server.Legacy.LogicalDisk.FreeSpace.TwoState.Monitortype" SubElementID="NonSystemDriveMBytesThreshold">
          <Name>Mbytes Threshold for Non-System Drives</Name>
          <Description>Error Mbytes Threshold for Non-System Drives</Description>
        </DisplayString>
        <DisplayString ElementID="Example.2x2.Windows.Server.Legacy.LogicalDisk.FreeSpace.TwoState.Monitortype" SubElementID="NonSystemDrivePercentThreshold">
          <Name>% Threshold for Non-System Drives</Name>
          <Description>Error % Threshold for Non-System Drives</Description>
        </DisplayString>
        <DisplayString ElementID="Example.2x2.Windows.Server.Legacy.LogicalDisk.FreeSpace.TwoState.Monitortype" SubElementID="TimeoutSeconds">
          <Name>Timeout Seconds</Name>
          <Description>Number of seconds that the module is allowed to run before it will be forced to stop.</Description>
        </DisplayString>
        <DisplayString ElementID="Example.2x2.Windows.Server.Legacy.LogicalDisk.FreeSpace.TwoState.Monitortype" SubElementID="DebugFlag">
          <Name>Debug Flag</Name>
          <Description>This setting enables the module to log different events at running time</Description>
        </DisplayString>
        <DisplayString ElementID="Example.2x2.Windows.Server.Legacy.LogicalDisk.FreeSpace.Critical.Monitor">
          <Name>Windows Logical Disk Free Space Critical Monitor</Name>
          <Description>Monitor the percentage free space and number of free MBytes remaining on a logical disk. Only when both the low percentage free space threshold and low number of free MBytes threshold is the disk flagged as having low disk free space.</Description>
        </DisplayString>
        <DisplayString ElementID="Example.2x2.Windows.Server.Legacy.LogicalDisk.FreeSpace.Critical.Monitor" SubElementID="UnderThreshold">
          <Name>Free Space Critically Low</Name>
          <Description>Disk free space is very low</Description>
        </DisplayString>
        <DisplayString ElementID="Example.2x2.Windows.Server.Legacy.LogicalDisk.FreeSpace.Critical.Monitor" SubElementID="OverEqualThreshold">
          <Name>Free Space Acceptable</Name>
          <Description>Disk free space is OK</Description>
        </DisplayString>
        <DisplayString ElementID="Example.2x2.Windows.Server.Legacy.LogicalDisk.FreeSpace.Critical.Monitor.AlertMessage">
          <Name>Logical Disk Free Space is critically low</Name>
          <Description>The disk {0} on computer {1} is running out of disk space. The values that exceeded the threshold are {2}% free space and {3} free Mbytes.</Description>
        </DisplayString>
        <DisplayString ElementID="Example.2x2.Windows.Server.Legacy.LogicalDisk.FreeSpace.Warning.Monitor">
          <Name>Windows Logical Disk Free Space Warning Monitor</Name>
          <Description>Monitor the percentage free space and number of free MBytes remaining on a logical disk. Only when both the low percentage free space threshold and low number of free MBytes threshold is the disk flagged as having low disk free space.</Description>
        </DisplayString>
        <DisplayString ElementID="Example.2x2.Windows.Server.Legacy.LogicalDisk.FreeSpace.Warning.Monitor" SubElementID="UnderThreshold">
          <Name>Free Space Low</Name>
          <Description>Disk free space is low</Description>
        </DisplayString>
        <DisplayString ElementID="Example.2x2.Windows.Server.Legacy.LogicalDisk.FreeSpace.Warning.Monitor" SubElementID="OverEqualThreshold">
          <Name>Free Space Acceptable</Name>
          <Description>Disk free space is OK</Description>
        </DisplayString>
        <DisplayString ElementID="Example.2x2.Windows.Server.Legacy.LogicalDisk.FreeSpace.Warning.Monitor.AlertMessage">
          <Name>Logical Disk Free Space is low</Name>
          <Description>The disk {0} on computer {1} is running out of disk space. The values that exceeded the threshold are {2}% free space and {3} free Mbytes.</Description>
        </DisplayString>
      </DisplayStrings>
    </LanguagePack>
  </LanguagePacks>
</ManagementPackFragment>
